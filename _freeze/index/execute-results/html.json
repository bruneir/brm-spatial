{
  "hash": "a54e62cc5c059dcf68b65dffd006b2db",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Analysing spatial data using R\nsubtitle: Brunei R User Group Meetup ðŸ‡§ðŸ‡³\ndate: '9 March 2023'\nauthor:\n  - name: Haziq Jamil\n    orcid: 0000-0003-3298-1010\n    email: haziq.jamil@ubd.edu.bn\n    url: https://haziqj.ml\n    affiliation: Universiti Brunei Darussalam\n    degrees: PhD\n---\n\n\n\n\n### `https://bruneir.github.io/brm-spatial` {.unlisted}\n\n## Preliminaries\n\nWelcome to the first Brunei R User Group meetup!\n\n::: {layout=\"[ 65, 35 ]\"}\n::: {#first-column}\n<br>\n\n> The RUGS mission is to facilitate the person-to-person exchange of knowledge in small group settings on a global scale. ---R Consortium\n:::\n\n::: {#second-column}\n![](https://bruneir.github.io/bruneiR-Rlogo.jpg)\n\n``` r\nR |> b_unei()\n```\n:::\n:::\n\n<u>About us</u>\n\n-   A group of UBD-ians and R enthusiasts\n-   We want to create a community of R users in Brunei\n-   Champion the Open Source cause\n\nMore events to come this year. Stay tuned!\n\n<!-- This is a hands-on workshop on spatial data analysis using R. We will be using the `bruneimap` package to visualise and analyse spatial data in Brunei Darussalam. -->\n\n::: {.callout-warning title=\"Outcomes\"}\n-   This is a hands-on, live-coding, lecture-style workshop.\n-   Expect to learn...\n    1.  What spatial data is and why it's important.\n    2.  What statistical analysis can be done with spatial data.\n    3.  How to perform spatial analysis using R.\n-   A basic understanding of R is assumed.\n:::\n\n### Getting started with R\n\n-   RStudio overview\n-   Importing data\n-   Installing packages\n\n### Some packages\n\n-   The tidyverse\n-   The [`{bruneimap}`](https://github.com/propertypricebn/bruneimap) package\n\n## Introduction\n\nMotivation...\n\n### Types of GIS data\n\nRoughly speaking, there are 4 types of GIS data.\n\n1.  **Points**\n    -   Having $(X, Y)$ coordinates (latitude, longitude, or projected coordinates, and are \"zero-dimensional\".\n    -   E.g. shopping malls, hospitals, outbreaks, etc.\n2.  **Lines**\n    -   A collection of points that form a path or a boundary. Has length.\n    -   E.g. roads, rivers, pipelines, etc.\n3.  **Polygons**\n    -   A closed area made up of line segments or curves.\n    -   E.g. countries, districts, buildings, etc.\n4.  **Raster**\n    -   Pixelated (or gridded) data where each pixel is associated with a geographical area and some measurement.\n    -   E.g. satellite images, elevation data, etc.\n\nThe first three are usually referred to as *vector data*. GIS data can be stored in various formats such as `.shp` or `.geojson`. The handling of GIS data (at least vector type data) is facilitated by the `{sf}` package [@pebesma2023spatial] which uses the *simple features* standard.\n\n::: callout-note\n*Simple features* refers to a formal standard (ISO 19125-1:2004) that describes how objects in the real world can be represented in computers, with emphasis on the spatial geometry of these objects.\n:::\n\nIt's helpful to think about the shape of this spatial data set. As an example, here's a random slice of 10 kampong-level population data for Brunei:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nleft_join(\n  kpg_sf, \n  bn_census2021, \n  by = join_by(id, kampong, mukim, district)\n) |>\n  select(\n    kampong, population, geometry\n  ) |>\n  slice_sample(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 114.335 ymin: 4.454393 xmax: 115.1363 ymax: 4.92127\nGeodetic CRS:  WGS 84\n# A tibble: 10 Ã— 3\n   kampong             population                                       geometry\n   <chr>                    <dbl>                                  <POLYGON [Â°]>\n 1 Kg. Semamang                 4 ((115.0822 4.69354, 115.0818 4.692418, 115.08â€¦\n 2 Kg. Pandai Besi B          159 ((114.9395 4.881824, 114.939 4.881551, 114.93â€¦\n 3 Kg. Bukit Salat             NA ((114.9373 4.890148, 114.9374 4.890148, 114.9â€¦\n 4 Kg. Negalang Ering         377 ((115.13 4.747178, 115.1306 4.741742, 115.130â€¦\n 5 Kg. Tanjong Panjang        253 ((114.6603 4.78818, 114.6606 4.788146, 114.66â€¦\n 6 Kg. Bukit Beruang         9835 ((114.615 4.754373, 114.6151 4.754361, 114.61â€¦\n 7 Pulau Baru-Baru             NA ((115.0413 4.908514, 115.0413 4.908514, 115.0â€¦\n 8 Kg. Sengkurong B          3852 ((114.8423 4.905544, 114.8423 4.905526, 114.8â€¦\n 9 Kg. Penyarap                NA ((114.3503 4.458278, 114.3506 4.458142, 114.3â€¦\n10 Kg. Bengkurong            3357 ((114.8602 4.858023, 114.8604 4.858004, 114.8â€¦\n```\n\n\n:::\n:::\n\n\nSpatial data analysis must have these two components:\n\n1.  The study variables (in the above example, this is population data).\n2.  GIS data regarding that study variable.\n\nIf we only have 1 without 2, then it really is just a regular data analysis (stating the obvious). Adding the GIS data is a process called \"geocoding\" the data points.\n\n::: callout-note\nIn R, geocoding using `{tidyverse}` can be achieved using the `dplyr::left_join()` or similar `xxx_join()` family of functions.\n:::\n\n## Point data\n\nUsing the data from @jaafar2023data . There are three datasets provided.\n\n1.  GIS data ([WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System \"World Geodetic System\") coordinates) of all study plots.\n2.  Soil physicochemical property data. This contains details of soil physical, chemical, nutrient concentration of the three habits studied.\n3.  Soil texture classification. Provides details on the classification of the soil texture in the habitats studied.\n\nWe will first load the data sets in R.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Load the data sets\nsoil_gps <- read_csv(\n  \"data/8389823/GPS - Revised.csv\", \n  # IMPORTANT!!! The csv file has latin1 encoding as opposed to UTF-8\n  locale = readr::locale(encoding = \"latin1\")\n)\n  \nsoil_physico <- read_csv(\"data/8389823/Soil physicochemical properties.csv\")\nsoil_texture <- read_csv(\"data/8389823/Soil texture classification.csv\")\n```\n:::\n\n\n### Clean up the point data\n\nLet's take a look at the point data set.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(soil_gps)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 18\nColumns: 5\n$ Forest_type  <chr> \"Kerangas\", \"Kerangas\", \"Kerangas\", \"Kerangas\", \"Kerangasâ€¦\n$ Habitat_type <chr> \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intactâ€¦\n$ Plot_name    <chr> \"KU1\", \"KU2\", \"KU3\", \"KU4\", \"KU5\", \"KU6\", \"KI1\", \"KI2\", \"â€¦\n$ Latitude     <chr> \"4Â° 35' 53.40\\\"N\", \"4Â° 35' 38.37\\\"N\", \"4Â° 35' 53.89\\\"N\", â€¦\n$ Longitude    <chr> \"114Â° 30' 39.09\\\"E\", \"114Â° 31' 05.89\\\"E\", \"114Â° 30' 38.90â€¦\n```\n\n\n:::\n:::\n\n\nThe first three columns are essentially the identifiers of the plots (forest type, habitat type, and the unique identification code for the study plot). However, the latitude and longitude needs a bit of cleaning up, because it's currently in character format. This needs to be in a formal Degree Minute Second `DMS` class that R can understand. For this we will use the `sp::char2dms()` function.\n\nAs an example let's take a look at the first latitude.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nx <- soil_gps$Latitude[1]\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"4Â° 35' 53.40\\\"N\"\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# convert it using sp::char2dms() function\nx <- sp::char2dms(x, chd = \"Â°\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4d35'53.4\"N\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFormal class 'DMS' [package \"sp\"] with 5 slots\n  ..@ WS : logi FALSE\n  ..@ deg: int 4\n  ..@ min: int 35\n  ..@ sec: num 53.4\n  ..@ NS : logi TRUE\n```\n\n\n:::\n:::\n\n\nThis is a special class that R understands as being a latitude from Earth. To convert it to decimal, we just do `as.numeric()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nas.numeric(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.598167\n```\n\n\n:::\n:::\n\n\nNow let's do this for all the values in the `soil_gps` data. We will use the `dplyr::mutate()` function in a pipeline.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsoil_gps <-\n  soil_gps |>\n  mutate(\n    Latitude = as.numeric(sp::char2dms(Latitude, chd = \"Â°\")),\n    Longitude = as.numeric(sp::char2dms(Longitude, chd = \"Â°\"))\n  )\nsoil_gps\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 Ã— 5\n   Forest_type Habitat_type Plot_name Latitude Longitude\n   <chr>       <chr>        <chr>        <dbl>     <dbl>\n 1 Kerangas    Intact       KU1           4.60      115.\n 2 Kerangas    Intact       KU2           4.59      115.\n 3 Kerangas    Intact       KU3           4.60      115.\n 4 Kerangas    Intact       KU4           4.63      114.\n 5 Kerangas    Intact       KU5           4.60      115.\n 6 Kerangas    Intact       KU6           4.60      115.\n 7 Kerangas    Invaded      KI1           4.59      115.\n 8 Kerangas    Invaded      KI2           4.59      115.\n 9 Kerangas    Invaded      KI3           4.59      115.\n10 Kerangas    Invaded      KI4           4.59      115.\n11 Kerangas    Invaded      KI5           4.59      115.\n12 Kerangas    Invaded      KI6           4.59      115.\n13 Kerangas    Plantation   AP1           4.59      115.\n14 Kerangas    Plantation   AP2           4.59      115.\n15 Kerangas    Plantation   AP3           4.59      115.\n16 Kerangas    Plantation   AP4           4.59      115.\n17 Kerangas    Plantation   AP5           4.59      115.\n18 Kerangas    Plantation   AP6           4.59      115.\n```\n\n\n:::\n:::\n\n\n### Preliminary plot of the data\n\nUsing the data contained in the `{bruneimap}` package, we can plot the study areas on a map of Brunei.\nUse either the `brn_sf`, `dis_sf`, `mkm_sf` or `kpg_sf` data sets.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(brn_sf) +\n  geom_sf() +\n  geom_point(data = soil_gps, aes(Longitude, Latitude)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nWe can zoom in a bit... but we have to find out manually the correct bounding box.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mkm_sf) +\n  geom_sf() +\n  geom_sf(data = dis_sf, fill = NA, col = \"black\", linewidth = 1) +\n  geom_point(data = soil_gps, aes(Longitude, Latitude)) +\n  geom_text_repel(\n    data = soil_gps,\n    aes(Longitude, Latitude, label = Plot_name),\n    box.padding = 0.5,\n    max.overlaps = 30\n  ) +\n  coord_sf(\n    xlim = c(114.4, 114.6),\n    ylim = c(4.5, 4.7)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n### Merge with the study data\n\nLet's take a look at the data set.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(soil_physico)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 144\nColumns: 16\n$ Habitat_type              <chr> \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intâ€¦\n$ Plot_name                 <chr> \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"Kâ€¦\n$ Subplot_name              <chr> \"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"A\",â€¦\n$ Soil_depth                <chr> \"0-15\", \"30-50\", \"0-15\", \"30-50\", \"0-15\", \"3â€¦\n$ Nitrogen                  <dbl> 0.617, 0.188, 0.663, 0.200, 0.465, 0.255, 0.â€¦\n$ Phosphorus                <dbl> 0.248, 0.129, 0.259, 0.295, 0.172, 0.145, 0.â€¦\n$ Magnesium                 <dbl> 0.000, 0.045, 0.054, 0.035, 0.079, 0.043, 0.â€¦\n$ Calcium                   <dbl> 0.167, 0.187, 0.148, 0.113, 0.253, 0.229, 0.â€¦\n$ Potassium                 <dbl> 0.059, 0.037, 0.054, 0.022, 0.098, 0.033, 0.â€¦\n$ Exchangable_magnesium     <dbl> 0.009, 0.004, 0.007, 0.005, 0.029, 0.014, 0.â€¦\n$ Exchangable_calcium       <dbl> 0.010, 0.009, 0.008, 0.009, 0.109, 0.041, 0.â€¦\n$ Exchangable_potassium     <dbl> 0.101, 0.085, 0.092, 0.087, 0.101, 0.090, 0.â€¦\n$ Available_phosphorus      <dbl> 0.012, 0.012, 0.013, 0.012, 0.013, 0.014, 0.â€¦\n$ pH                        <dbl> 2.3, 2.7, 2.0, 2.0, 2.6, 2.5, 2.3, 2.1, 1.0,â€¦\n$ Gravimetric_water_content <dbl> 5.911, 3.560, 10.860, 5.082, 6.963, 4.549, 5â€¦\n$ Organic_matter            <dbl> 4.559, 1.399, 4.523, 2.309, 3.131, 2.209, 3.â€¦\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(soil_texture)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 144\nColumns: 8\n$ Habitat_type           <chr> \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intactâ€¦\n$ Plot_name              <chr> \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"KU2\", \"KU2\", \"KU2\"â€¦\n$ Subplot_name           <chr> \"A\", \"B\", \"C\", \"D\", \"A\", \"B\", \"C\", \"D\", \"A\", \"Bâ€¦\n$ Soil_depth             <chr> \"0-15\", \"0-15\", \"0-15\", \"0-15\", \"0-15\", \"0-15\",â€¦\n$ Clay                   <dbl> 0.0, 0.0, 0.0, 0.0, 0.0, 2.5, 2.5, 2.5, 0.0, 2.â€¦\n$ Silt                   <dbl> 2.5, 0.0, 0.0, 2.5, 0.0, 0.0, 2.5, 2.5, 7.5, 7.â€¦\n$ Sand                   <dbl> 97.5, 100.0, 100.0, 97.5, 100.0, 97.5, 95.0, 95â€¦\n$ Texture_classification <chr> \"Sand\", \"Sand\", \"Sand\", \"Sand\", \"Sand\", \"Sand\",â€¦\n```\n\n\n:::\n:::\n\n\nThe `soil_physico` and `soil_texture` data sets contain the same columns, so we might as well merge them together. \nWe will use the `dplyr::left_join()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Actually I just want to merge these two together\nsoil_df <- left_join(\n  soil_physico,\n  soil_texture,\n  by = join_by(Habitat_type, Plot_name, Subplot_name, Soil_depth)\n)\nsoil_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 144 Ã— 20\n   Habitat_type Plot_name Subplot_name Soil_depth Nitrogen Phosphorus Magnesium\n   <chr>        <chr>     <chr>        <chr>         <dbl>      <dbl>     <dbl>\n 1 Intact       KU1       A            0-15          0.617      0.248     0    \n 2 Intact       KU1       A            30-50         0.188      0.129     0.045\n 3 Intact       KU1       B            0-15          0.663      0.259     0.054\n 4 Intact       KU1       B            30-50         0.2        0.295     0.035\n 5 Intact       KU1       C            0-15          0.465      0.172     0.079\n 6 Intact       KU1       C            30-50         0.255      0.145     0.043\n 7 Intact       KU1       D            0-15          0.285      0.225     0.052\n 8 Intact       KU1       D            30-50         0.057      0.207     0.031\n 9 Intact       KU2       A            0-15          0.37       0.135     0.038\n10 Intact       KU2       A            30-50         0.114      0.168     0.021\n# â„¹ 134 more rows\n# â„¹ 13 more variables: Calcium <dbl>, Potassium <dbl>,\n#   Exchangable_magnesium <dbl>, Exchangable_calcium <dbl>,\n#   Exchangable_potassium <dbl>, Available_phosphorus <dbl>, pH <dbl>,\n#   Gravimetric_water_content <dbl>, Organic_matter <dbl>, Clay <dbl>,\n#   Silt <dbl>, Sand <dbl>, Texture_classification <chr>\n```\n\n\n:::\n:::\n\n\nOnce we've done that, the `soil_df` data set (the study variables) is actually missing the spatial data. \nWe need to geocode it with the `soil_gps` data set.\nAgain, `dplyr::left_join()` to the rescue!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsoil_df <- left_join(\n  soil_df, \n  soil_gps,\n  by = join_by(Habitat_type, Plot_name)\n)\n```\n:::\n\n\nNow we're in a position to plot the study variables on the map.\nNote that there are only 18 plots in the `soil_gps` data set, and each plot has repeated measurements. \nThat means when we plot it, it will overlap and look like a single point. \nSo a good thing to do is to jitter the point so it's easier to see.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(kpg_sf) +\n  geom_sf(fill = NA) +\n  geom_jitter(\n    data = soil_df, \n    aes(Longitude, Latitude, col = Nitrogen, size = Nitrogen, \n        shape = Habitat_type),\n    width = 0.001, height = 0.001, alpha = 0.7\n  ) +\n  coord_sf(\n    xlim = c(114.46, 114.54),\n    ylim = c(4.58, 4.64)\n  ) +\n  scale_color_viridis_c() +\n  guides(size = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Predictive models\n\nAt this stage, we probably want to consult an expert in this field, and ask what variables are important for predicting the nitrogen content in the soil, so that we can build a *predictive model*.\nIn mathematics, a model is simply a relationship between variables, like so:\n$$\ny = f(x_1,x_2,\\dots,x_p) + \\epsilon\n$$\nwhere the $x_1,\\dots,x_p$ are the input variables, and $y$ is the output variable of interest (in this case, nitrogen concentrations).\nNo model can perfectly account for this relationship, so we add a term $\\epsilon$ which represents the error in the model.\nIdeally this should be as small as possible.\n\nSeveral models, ranging from classical statistical models to complex machine learning models, are possible:\n\n1. Linear regression model -- `lm()`\n2. Generalised additive models (GAM) [@wood2017generalized] -- `mgcv::gam()`\n3. Gaussian process regression (Kriging) -- `kernlab::gausspr()`\n4. Random forests -- `randomForest::randomForest()`\n5. Geographically weighted regression (GWR) -- `spgwr::gwr()`\n\nLet's focus on Gaussian process regression (because that's one that I know quite well).\nThe idea of GPR is to model the relationship between the input variables and the output variable as a multivariate Gaussian distribution:\n$$\nf(x) \\sim \\operatorname{N}\\big(0, K(x,x')\\big)\n$$\nwhere $K(x,x')$ is the covariance function, which measures the similarity between the input variables $x$ and $x'$.\nThe most common covariance function is the squared exponential function:\n$$\nK(x,x') = \\exp\\left(-\\frac{1}{2}\\sum_{i=1}^p (x_i - x'_i)^2\\right).\n$$\nLet $d$ represent the \"distance\" between two points. \nThen the squared exponential kernel becomes very small when this distance $d$ is large, and very large when $d$ is small.\nPut another way, since elements of the matrix $K$ represent co-variability, that means two points that are close together will behave similarly, and vice versa.\nThis is very much in line with Tobler's first law of geography: \"Everything is related to everything else, but near things are more related than distant things\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- seq(-4, 4, length = 100)\ny <- exp(-x^2)\ntibble(d = x, Kxx = y) |>\n  ggplot(aes(d, Kxx)) +\n  geom_line() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nGiven the assumed behaviour of our function $f(x)$, and what is observed from the data, we can then make predictions about the nitrogen content at unobserved locations.\nSkipping over a whole lot of mathematics, let's just fit this model in R.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(kernlab)\n\n# Build a model to predict Nitrogen from all numeric variables. This is\n# definitely not theory based, so just want to show the code.\nsoil_df <-\n  soil_df |>\n  select(where(is.numeric)) \nmod <- gausspr(Nitrogen ~ ., data = soil_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUsing automatic sigma estimation (sigest) for RBF or laplace kernel \n```\n\n\n:::\n\n```{.r .cell-code}\nmod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGaussian Processes object of class \"gausspr\" \nProblem type: regression \n\nGaussian Radial Basis kernel function. \n Hyperparameter : sigma =  0.0577718975396018 \n\nNumber of training instances learned : 144 \nTrain error : 0.111287251 \n```\n\n\n:::\n:::\n\n\nHaving done that, we now want to prepare a prediction data frame.\nEssentially, we will rasterise the study area into a predefined grid.\nFor the other variables, we will just set them at their mean values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nxr <- c(114.4, 114.6)\nxx <- seq(xr[1] - 0.01, xr[2] + 0.01, length = 100)\n\nyr <- c(4.5, 4.7)\nyy <- seq(yr[1] - 0.01, yr[2] + 0.01, length = 100)\n\nmean_X <- \n  soil_df |>\n  summarise(across(everything(), mean)) |>\n  select(-Longitude, -Latitude)\n\npred_df <-\n  expand_grid(\n    Longitude = xx,\n    Latitude = yy\n  ) |>\n  bind_cols(mean_X)\n\npred_df$ypred <- predict(mod, newdata = pred_df)\n\n# Additional step: filter points that are outside of the Brunei land area.\npred_sf <- \n  pred_df |>\n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326) |>\n  st_filter(y = brn_sf[1, ])\n\nggplot() +\n  geom_raster(\n    data = pred_sf,\n    aes(fill = ypred, geometry = geometry),\n    stat = \"sf_coordinates\",\n    alpha = 0.8\n  ) +\n  # geom_raster(data = pred_df, aes(Longitude, Latitude, fill = ypred),\n  #             alpha = 0.8) +\n  geom_sf(data = kpg_sf, fill = NA, inherit.aes = FALSE, col = \"black\") +\n  geom_sf(data = dis_sf, fill = NA, col = \"black\", linewidth = 1) +\n  geom_point(data = soil_gps, aes(Longitude, Latitude, \n                                  shape = Habitat_type)) +\n  geom_text_repel(\n    data = soil_gps,\n    aes(Longitude, Latitude, label = Plot_name),\n    box.padding = 0.5,\n    max.overlaps = 30\n  ) +\n  scale_fill_viridis_c() +\n  scale_colour_viridis_c() +\n  coord_sf(xlim = xr, ylim = yr)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-warning}\nGarbage In Garbage Out! Modelling is as much an art as it is a science. Careful consideration needs to be made as to what is considered a predictor of a variable.\n:::\n\n\n<!-- ```{r} -->\n\n<!-- ggplot(kpg_sf) + -->\n\n<!--   geom_sf(aes(fill = mukim), col = \"gray50\") + -->\n\n<!--   geom_sf(data = mkm_sf, col = \"black\", lwd = 0.5, fill = NA) + -->\n\n<!--   geom_sf(data = filter(kpg_sf, is.na(mukim)), fill = \"gray70\", col = \"gray70\") + -->\n\n<!--   scale_fill_viridis_d(option = \"turbo\") + -->\n\n<!--   theme(legend.position = \"none\")  -->\n\n<!-- ``` -->\n\n## Line data (polylines)\n\nFor this example\n\n## Areal data (polygons)\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Represent statistical data using colour mapping symbology (choropleth)\n-   Use `ggplot2::geom_label()` or `ggrepel::geom_label_repel()` to add labels to the map\n-   Using a binned colour scale, e.g. `ggplot2::geom_scale_fill_viridis_b()`\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbn_pop_sf <- \n  left_join(\n    kpg_sf, \n    bn_census2021, \n    by = join_by(id, kampong, mukim, district\n  ))\n\nkpg_labels_sf <-\n  bn_pop_sf |>\n  arrange(desc(population)) |>\n  slice_head(n = 10)\n\nbn_pop_sf |>\n  # filter(population > 50) |>\n  ggplot() +\n  geom_sf(aes(fill = population), col = NA, alpha = 0.8) +\n  geom_sf(data = kpg_sf, fill = NA, col = \"black\") +\n  ggrepel::geom_label_repel(\n    data = kpg_labels_sf,\n    aes(label = kampong, geometry = geometry),\n    stat = \"sf_coordinates\",\n    inherit.aes = FALSE,\n    box.padding = 1,\n    size = 2,\n    max.overlaps = Inf\n  ) +\n  scale_fill_viridis_b(\n    name = \"Population\",\n    na.value = NA,\n    labels = scales::comma,\n    breaks = c(0, 50, 100, 1000, 5000, 10000, 15000)\n    # limits = c(0, 12000)\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
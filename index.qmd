---
title: Analysing spatial data using R
subtitle: Brunei R User Group Meetup ðŸ‡§ðŸ‡³
date: '9 March 2023'
author:
  - name: Haziq Jamil
    orcid: 0000-0003-3298-1010
    email: haziq.jamil@ubd.edu.bn
    url: https://haziqj.ml
    affiliation: Universiti Brunei Darussalam
    degrees: PhD
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(bruneimap)
theme_set(theme_bw())
```

## `https://bruneir.github.io/brm-spatial` {.unlisted}

# Preliminaries

Welcome to the first Brunei R User Group meetup!

::: {layout="[ 65, 35 ]"}
::: {#first-column}
<br>

> The RUGS mission is to facilitate the person-to-person exchange of knowledge in small group settings on a global scale. ---R Consortium
:::

::: {#second-column}
![](https://bruneir.github.io/bruneiR-Rlogo.jpg)

``` r
R |> b_unei()
```
:::
:::

<u>About us</u>

-   A group of UBD-ians and R enthusiasts
-   We want to create a community of R users in Brunei
-   Champion the Open Source cause

More events to come this year. Stay tuned!

<!-- This is a hands-on workshop on spatial data analysis using R. We will be using the `bruneimap` package to visualise and analyse spatial data in Brunei Darussalam. -->

::: {.callout-warning title="Outcomes"}
-   This is a hands-on, live-coding, lecture-style workshop.
-   Expect to learn...
    1.  What spatial data is and why it's important.
    2.  What statistical analysis can be done with spatial data.
    3.  How to perform spatial analysis using R.
-   A basic understanding of R is assumed.
:::

## Getting started with R

-   RStudio overview
-   Importing data
-   Installing packages

## Some packages

-   The tidyverse
-   The [`{bruneimap}`](https://github.com/propertypricebn/bruneimap) package

# Introduction

Motivation...

## Types of GIS data

Roughly speaking, there are 4 types of GIS data.

1.  **Points**
    -   Having $(X, Y)$ coordinates (latitude, longitude, or projected coordinates, and are "zero-dimensional".
    -   E.g. shopping malls, hospitals, outbreaks, etc.
2.  **Lines**
    -   A collection of points that form a path or a boundary. Has length.
    -   E.g. roads, rivers, pipelines, etc.
3.  **Polygons**
    -   A closed area made up of line segments or curves.
    -   E.g. countries, districts, buildings, etc.
4.  **Raster**
    -   Pixelated (or gridded) data where each pixel is associated with a geographical area and some measurement.
    -   E.g. satellite images, elevation data, etc.

The first three are usually referred to as *vector data*. GIS data can be stored in various formats such as `.shp` or `.geojson`. The handling of GIS data (at least vector type data) is facilitated by the `{sf}` package [@pebesma2023spatial] which uses the *simple features* standard.

::: callout-note
*Simple features* refers to a formal standard (ISO 19125-1:2004) that describes how objects in the real world can be represented in computers, with emphasis on the spatial geometry of these objects.
:::

It's helpful to think about the shape of this spatial data set. As an example, here's a random slice of 10 kampong-level population data for Brunei:

```{r}
left_join(
  kpg_sf, 
  bn_census2021, 
  by = join_by(id, kampong, mukim, district)
) |>
  select(
    kampong, population, geometry
  ) |>
  slice_sample(n = 10)
  

```

Spatial data analysis must have these two components:

1.  The study variables (in the above example, this is population data).
2.  GIS data regarding that study variable.

If you only have 1 without 2, then it really is just a regular data analysis (stating the obvious). Adding the GIS data is a process called "geocoding" your data points.

::: callout-note
In R, geocoding using `{tidyverse}` can be achieved using the `dplyr::left_join()` or similar `xxx_join()` family of functions.
:::

# Point data

Using the data from @jaafar2023data . There are three datasets provided.

1.  GIS data ([WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System "World Geodetic System") coordinates) of all study plots.
2.  Soil physicochemical property data. This contains details of soil physical, chemical, nutrient concentration of the three habits studied.
3.  Soil texture classification. Provides details on the classification of the soil texture in the habitats studied.

We will first load the data sets in R.

```{r}
# Load the data sets
soil_gps <- read_csv(
  "data/8389823/GPS - Revised.csv", 
  # IMPORTANT!!! The csv file has latin1 encoding as opposed to UTF-8
  locale = readr::locale(encoding = "latin1")
)
  
soil_physico <- read_csv("data/8389823/Soil physicochemical properties.csv")
soil_texture <- read_csv("data/8389823/Soil texture classification.csv")
```

## Clean up the point data

Let's take a look at the point data set.

```{r}
#| code-fold: false
glimpse(soil_gps)
```

The first three columns are essentially the identifiers of the plots (forest type, habitat type, and the unique identification code for the study plot). However, the latitude and longitude needs a bit of cleaning up, because it's currently in character format. This needs to be in a formal Degree Minute Second `DMS` class that R can understand. For this we will use the `sp::char2dms()` function.

As an example let's take a look at the first latitude.

```{r}
#| code-fold: false
x <- soil_gps$Latitude[1]
x

# convert it using sp::char2dms() function
x <- sp::char2dms(x, chd = "Â°")
x
str(x)
```

This is a special class that R understands as being a latitude from Earth. To convert it to decimal, we just do `as.numeric()`:

```{r}
#| code-fold: false
as.numeric(x)
```

Now let's do this for all the values in the `soil_gps` data. We will use the `dplyr::mutate()` function in a pipeline.

```{r}
soil_gps <-
  soil_gps |>
  mutate(
    Latitude = as.numeric(sp::char2dms(Latitude, chd = "Â°")),
    Longitude = as.numeric(sp::char2dms(Longitude, chd = "Â°"))
  )
soil_gps
```

## Preliminary plot of the data

```{r}
mkm_sf |>
  ggplot() +
  geom_sf() +
  geom_point(data = soil_gps, aes(Longitude, Latitude)) 
```

## Merge with the study data

<!-- ```{r} -->

<!-- ggplot(kpg_sf) + -->

<!--   geom_sf(aes(fill = mukim), col = "gray50") + -->

<!--   geom_sf(data = mkm_sf, col = "black", lwd = 0.5, fill = NA) + -->

<!--   geom_sf(data = filter(kpg_sf, is.na(mukim)), fill = "gray70", col = "gray70") + -->

<!--   scale_fill_viridis_d(option = "turbo") + -->

<!--   theme(legend.position = "none")  -->

<!-- ``` -->

# Brunei population

::: {.callout-tip title="What we'll learn"}
-   Represent statistical data using colour mapping symbology (choropleth)
-   Use `ggplot2::geom_label()` or `ggrepel::geom_label_repel()` to add labels to the map
-   Using a binned colour scale, e.g. `ggplot2::geom_scale_fill_viridis_b()`
:::

```{r}
bn_pop_sf <- 
  left_join(
    kpg_sf, 
    bn_census2021, 
    by = join_by(id, kampong, mukim, district
  ))

kpg_labels_sf <-
  bn_pop_sf |>
  arrange(desc(population)) |>
  slice_head(n = 10)

bn_pop_sf |>
  # filter(population > 50) |>
  ggplot() +
  geom_sf(aes(fill = population), col = NA, alpha = 0.8) +
  geom_sf(data = kpg_sf, fill = NA, col = "black") +
  ggrepel::geom_label_repel(
    data = kpg_labels_sf,
    aes(label = kampong, geometry = geometry),
    stat = "sf_coordinates",
    inherit.aes = FALSE,
    box.padding = 1,
    size = 2,
    max.overlaps = Inf
  ) +
  scale_fill_viridis_b(
    name = "Population",
    na.value = NA,
    labels = scales::comma,
    breaks = c(0, 50, 100, 1000, 5000, 10000, 15000)
    # limits = c(0, 12000)
  ) +
  theme_bw()
```

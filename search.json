[
  {
    "objectID": "index.html#preliminaries",
    "href": "index.html#preliminaries",
    "title": "Analysing spatial data using R",
    "section": "Preliminaries",
    "text": "Preliminaries\nWelcome to the first Brunei R User Group meetup!\n\n\n\n\n\n\n\n\nThe RUGS mission is to facilitate the person-to-person exchange of knowledge in small group settings on a global scale. ‚ÄîR Consortium\n\n\n\n\n\"R\" |&gt; \n  rug(\"b\", _, \"unei\")\n\n\n\nAbout us\n\nA group of UBD-ians and R enthusiasts\nWe want to create a community of R users in Brunei\nChampion the Open Source cause\n\nMore events to come this year. Stay tuned!\n\nExpectations\n\n\n\n\n\n\nOutcomes\n\n\n\n\nThis is a hands-on, live-coding, lecture-style ‚Äúworkshop‚Äù.\nExpect to learn (or at the very least, see me do!)‚Ä¶\n\nWhat spatial data is and why it‚Äôs important.\nWhat statistical analysis can be done with spatial data.\nHow to perform spatial analysis using R.\n\nA basic understanding of R is assumed.\n\n\n\n\nFor some, maybe it will be a bit fast-paced (sorry in advanced!). All the materials will be available online (see link on the right).\nI‚Äôm very happy to answer questions afterwards!\n\n\nClone this repo from GitHub\nYou can access all the source files from GitHub. Click on the link at the right labelled ‚ÄòGitHub Repo‚Äô. If you already have a GitHub account, you can go ahead and clone this to your local computer. If not, you can download the files as a zip, and unzip them at a location of your choice.\n\n\n\nGetting started with R\nI‚Äôll just talk about these points briefly:\n\nWhat‚Äôs the difference between R and RStudio?\nQuick run through RStudio‚Äôs features\nSet up a project\nR Scripts vs Notebooks (.qmd or .Rmd)\nExecuting commands in R\n\n\n# Try this out for yourself!\n\nN &lt;- 100\nx &lt;- runif(n = N, min = 0, max = 1)\nhead(x)  # Show the first 6 elements\n\n[1] 0.8304699 0.5659743 0.7684357 0.7287764 0.1446043 0.4890953\n\nmean(x)  # Calculate the mean of this vector\n\n[1] 0.4900089\n\nrun_x &lt;- rep(NA, length(x))\nfor (i in seq_along(x)) {\n  run_x[i] &lt;- sum(x[1:i])\n}\nhead(run_x)\n\n[1] 0.8304699 1.3964442 2.1648798 2.8936562 3.0382605 3.5273558\n\n\n\n\nList of packages\nThe power of R comes from its diverse range of user-contributed packages. To install a package in R, we type install.packages(\"package_name\"). As an example, try install the {tidyverse} package.\n\ninstall.packages(\"tidyverse\")\n\nA bunch of things will happen on your screen that makes you look like a legit hacker. (It‚Äôs normal! Unles‚Ä¶ there are some errors in the installation process üòÖ) Once that‚Äôs done, you will want to load the package to start using it.\n\nlibrary(tidyverse)  # no need to use quotes\n\nHere‚Äôs a list of packages we will be using today. You‚Äôll need to install all of them before we begin. In RStudio, there will be a prompt (yellow line at the top of the source pane) for you to install all these packages with a single click.\nFurthermore, there are packages that are not yet on CRAN, but are available on GitHub. Please install them using the remotes package.\n\nremotes::install_github(\"propertypricebn/bruneimap\")\n\nOf course, don‚Äôt forget to load it. For more information, please check out the package‚Äôs GitHub page\n\n\nCode\nlibrary(bruneimap)"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Analysing spatial data using R",
    "section": "Introduction",
    "text": "Introduction\nMotivation‚Ä¶\n\nTypes of GIS data\nRoughly speaking, there are 4 types of GIS data.\n\nPoints\n\nHaving \\((X, Y)\\) coordinates (latitude, longitude, or projected coordinates, and are ‚Äúzero-dimensional‚Äù.\nE.g. shopping malls, hospitals, outbreaks, etc.\n\nLines\n\nA collection of points that form a path or a boundary. Has length.\nE.g. roads, rivers, pipelines, etc.\n\nPolygons\n\nA closed area made up of line segments or curves.\nE.g. countries, districts, buildings, etc.\n\nRaster\n\nPixelated (or gridded) data where each pixel is associated with a geographical area and some measurement.\nE.g. satellite images, elevation data, etc.\n\n\nThe first three are usually referred to as vector data. GIS data can be stored in various formats such as .shp or .geojson. The handling of GIS data (at least vector type data) is facilitated by the {sf} package (Pebesma and Bivand 2023) which uses the simple features standard.\n\n\n\n\n\n\nNote\n\n\n\nSimple features refers to a formal standard (ISO 19125-1:2004) that describes how objects in the real world can be represented in computers, with emphasis on the spatial geometry of these objects.\n\n\nIt‚Äôs helpful to think about the shape of this spatial data set. As an example, here‚Äôs a random slice of 10 kampong-level population data for Brunei:\n\n\nCode\nleft_join(\n  kpg_sf, \n  bn_census2021, \n  by = join_by(id, kampong, mukim, district)\n) |&gt;\n  select(\n    kampong, population, geometry\n  ) |&gt;\n  slice_sample(n = 10)\n\n\nSimple feature collection with 10 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 114.2334 ymin: 4.299611 xmax: 115.1575 ymax: 5.044288\nGeodetic CRS:  WGS 84\n# A tibble: 10 √ó 3\n   kampong                          population                          geometry\n   &lt;chr&gt;                                 &lt;dbl&gt;                     &lt;POLYGON [¬∞]&gt;\n 1 Kg. Mata-Mata                          7159 ((114.9012 4.913718, 114.9013 4.‚Ä¶\n 2 Kg. Gatas                                47 ((114.4678 4.416534, 114.4679 4.‚Ä¶\n 3 STKRJ Mata-Mata Kawasan 3              2485 ((114.8728 4.906532, 114.8725 4.‚Ä¶\n 4 Perumahan Negara Rimba Kawasan 2       4151 ((114.9158 4.954169, 114.9151 4.‚Ä¶\n 5 Kg. Mendaram Kecil                       58 ((114.4898 4.339776, 114.4898 4.‚Ä¶\n 6 Kg. Kinalong                             12 ((115.071 4.69048, 115.0711 4.69‚Ä¶\n 7 Kg. Simbatang Batu Apoi                  NA ((115.1573 4.681658, 115.1573 4.‚Ä¶\n 8 Kg. Telisai                            1802 ((114.5669 4.727061, 114.5684 4.‚Ä¶\n 9 Kg. Mumong B                           3141 ((114.2598 4.579565, 114.2687 4.‚Ä¶\n10 Tanjong Pelumpong                        NA ((115.1004 5.040252, 115.1005 5.‚Ä¶\n\n\nSpatial data analysis must have these two components:\n\nThe study variables (in the above example, this is population data).\nGIS data regarding that study variable.\n\nIf we only have 1 without 2, then it really is just a regular data analysis (stating the obvious). Adding the GIS data is a process called ‚Äúgeocoding‚Äù the data points.\n\n\n\n\n\n\nNote\n\n\n\nIn R, geocoding using {tidyverse} can be achieved using the dplyr::left_join() or similar xxx_join() family of functions."
  },
  {
    "objectID": "index.html#multipoint-data",
    "href": "index.html#multipoint-data",
    "title": "Analysing spatial data using R",
    "section": "(MULTI)POINT data",
    "text": "(MULTI)POINT data\nUsing the data from Jaafar and Sukri (2023) on the physicochemical characteristics and texture classification of soil in Bornean tropical heath forests affected by exotic Acacia mangium. There are three datasets provided.\n\nGIS data (WGS84 coordinates) of all study plots.\nSoil physicochemical property data. This contains details of soil physical, chemical, nutrient concentration of the three habits studied.\nSoil texture classification. Provides details on the classification of the soil texture in the habitats studied.\n\nWe will first load the data sets in R.\n\n\nCode\n## Load the data sets\nsoil_gps &lt;- read_csv(\n  \"data/8389823/GPS - Revised.csv\", \n  # IMPORTANT!!! The csv file has latin1 encoding as opposed to UTF-8\n  locale = readr::locale(encoding = \"latin1\")\n)\n  \nsoil_physico &lt;- read_csv(\"data/8389823/Soil physicochemical properties.csv\")\nsoil_texture &lt;- read_csv(\"data/8389823/Soil texture classification.csv\")\n\n\n\nClean up the point data\nLet‚Äôs take a look at the point data set.\n\nglimpse(soil_gps)\n\nRows: 18\nColumns: 5\n$ Forest_type  &lt;chr&gt; \"Kerangas\", \"Kerangas\", \"Kerangas\", \"Kerangas\", \"Kerangas‚Ä¶\n$ Habitat_type &lt;chr&gt; \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intact‚Ä¶\n$ Plot_name    &lt;chr&gt; \"KU1\", \"KU2\", \"KU3\", \"KU4\", \"KU5\", \"KU6\", \"KI1\", \"KI2\", \"‚Ä¶\n$ Latitude     &lt;chr&gt; \"4¬∞ 35' 53.40\\\"N\", \"4¬∞ 35' 38.37\\\"N\", \"4¬∞ 35' 53.89\\\"N\", ‚Ä¶\n$ Longitude    &lt;chr&gt; \"114¬∞ 30' 39.09\\\"E\", \"114¬∞ 31' 05.89\\\"E\", \"114¬∞ 30' 38.90‚Ä¶\n\n\nThe first three columns are essentially the identifiers of the plots (forest type, habitat type, and the unique identification code for the study plot). However, the latitude and longitude needs a bit of cleaning up, because it‚Äôs currently in character format. This needs to be in a formal Degree Minute Second DMS class that R can understand. For this we will use the sp::char2dms() function.\nAs an example let‚Äôs take a look at the first latitude.\n\nx &lt;- soil_gps$Latitude[1]\nx\n\n[1] \"4¬∞ 35' 53.40\\\"N\"\n\n# convert it using sp::char2dms() function\nx &lt;- sp::char2dms(x, chd = \"¬∞\")\nx\n\n[1] 4d35'53.4\"N\n\nstr(x)\n\nFormal class 'DMS' [package \"sp\"] with 5 slots\n  ..@ WS : logi FALSE\n  ..@ deg: int 4\n  ..@ min: int 35\n  ..@ sec: num 53.4\n  ..@ NS : logi TRUE\n\n\nThis is a special class that R understands as being a latitude from Earth. To convert it to decimal, we just do as.numeric():\n\nas.numeric(x)\n\n[1] 4.598167\n\n\nNow let‚Äôs do this for all the values in the soil_gps data. We will use the dplyr::mutate() function in a pipeline.\n\n\nCode\nsoil_gps &lt;-\n  soil_gps |&gt;\n  mutate(\n    Latitude = as.numeric(sp::char2dms(Latitude, chd = \"¬∞\")),\n    Longitude = as.numeric(sp::char2dms(Longitude, chd = \"¬∞\"))\n  )\nsoil_gps\n\n\n# A tibble: 18 √ó 5\n   Forest_type Habitat_type Plot_name Latitude Longitude\n   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n 1 Kerangas    Intact       KU1           4.60      115.\n 2 Kerangas    Intact       KU2           4.59      115.\n 3 Kerangas    Intact       KU3           4.60      115.\n 4 Kerangas    Intact       KU4           4.63      114.\n 5 Kerangas    Intact       KU5           4.60      115.\n 6 Kerangas    Intact       KU6           4.60      115.\n 7 Kerangas    Invaded      KI1           4.59      115.\n 8 Kerangas    Invaded      KI2           4.59      115.\n 9 Kerangas    Invaded      KI3           4.59      115.\n10 Kerangas    Invaded      KI4           4.59      115.\n11 Kerangas    Invaded      KI5           4.59      115.\n12 Kerangas    Invaded      KI6           4.59      115.\n13 Kerangas    Plantation   AP1           4.59      115.\n14 Kerangas    Plantation   AP2           4.59      115.\n15 Kerangas    Plantation   AP3           4.59      115.\n16 Kerangas    Plantation   AP4           4.59      115.\n17 Kerangas    Plantation   AP5           4.59      115.\n18 Kerangas    Plantation   AP6           4.59      115.\n\n\n\n\nPreliminary plot of the data\nUsing the data contained in the {bruneimap} package, we can plot the study areas on a map of Brunei. Use either the brn_sf, dis_sf, mkm_sf or kpg_sf data sets.\n\n\nCode\nggplot(brn_sf) +\n  geom_sf() +\n  geom_point(data = soil_gps, aes(Longitude, Latitude)) \n\n\n\n\n\n\n\n\n\nWe can zoom in a bit‚Ä¶ but we have to find out manually the correct bounding box.\n\n\nCode\nggplot(mkm_sf) +\n  geom_sf() +\n  geom_sf(data = dis_sf, fill = NA, col = \"black\", linewidth = 1) +\n  geom_point(data = soil_gps, aes(Longitude, Latitude)) +\n  geom_text_repel(\n    data = soil_gps,\n    aes(Longitude, Latitude, label = Plot_name),\n    box.padding = 0.5,\n    max.overlaps = 30\n  ) +\n  coord_sf(\n    xlim = c(114.4, 114.6),\n    ylim = c(4.5, 4.7)\n  )\n\n\n\n\n\n\n\n\n\n\n\nMerge with the study data\nLet‚Äôs take a look at the data set.\n\nglimpse(soil_physico)\n\nRows: 144\nColumns: 16\n$ Habitat_type              &lt;chr&gt; \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Int‚Ä¶\n$ Plot_name                 &lt;chr&gt; \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"K‚Ä¶\n$ Subplot_name              &lt;chr&gt; \"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"A\",‚Ä¶\n$ Soil_depth                &lt;chr&gt; \"0-15\", \"30-50\", \"0-15\", \"30-50\", \"0-15\", \"3‚Ä¶\n$ Nitrogen                  &lt;dbl&gt; 0.617, 0.188, 0.663, 0.200, 0.465, 0.255, 0.‚Ä¶\n$ Phosphorus                &lt;dbl&gt; 0.248, 0.129, 0.259, 0.295, 0.172, 0.145, 0.‚Ä¶\n$ Magnesium                 &lt;dbl&gt; 0.000, 0.045, 0.054, 0.035, 0.079, 0.043, 0.‚Ä¶\n$ Calcium                   &lt;dbl&gt; 0.167, 0.187, 0.148, 0.113, 0.253, 0.229, 0.‚Ä¶\n$ Potassium                 &lt;dbl&gt; 0.059, 0.037, 0.054, 0.022, 0.098, 0.033, 0.‚Ä¶\n$ Exchangable_magnesium     &lt;dbl&gt; 0.009, 0.004, 0.007, 0.005, 0.029, 0.014, 0.‚Ä¶\n$ Exchangable_calcium       &lt;dbl&gt; 0.010, 0.009, 0.008, 0.009, 0.109, 0.041, 0.‚Ä¶\n$ Exchangable_potassium     &lt;dbl&gt; 0.101, 0.085, 0.092, 0.087, 0.101, 0.090, 0.‚Ä¶\n$ Available_phosphorus      &lt;dbl&gt; 0.012, 0.012, 0.013, 0.012, 0.013, 0.014, 0.‚Ä¶\n$ pH                        &lt;dbl&gt; 2.3, 2.7, 2.0, 2.0, 2.6, 2.5, 2.3, 2.1, 1.0,‚Ä¶\n$ Gravimetric_water_content &lt;dbl&gt; 5.911, 3.560, 10.860, 5.082, 6.963, 4.549, 5‚Ä¶\n$ Organic_matter            &lt;dbl&gt; 4.559, 1.399, 4.523, 2.309, 3.131, 2.209, 3.‚Ä¶\n\nglimpse(soil_texture)\n\nRows: 144\nColumns: 8\n$ Habitat_type           &lt;chr&gt; \"Intact\", \"Intact\", \"Intact\", \"Intact\", \"Intact‚Ä¶\n$ Plot_name              &lt;chr&gt; \"KU1\", \"KU1\", \"KU1\", \"KU1\", \"KU2\", \"KU2\", \"KU2\"‚Ä¶\n$ Subplot_name           &lt;chr&gt; \"A\", \"B\", \"C\", \"D\", \"A\", \"B\", \"C\", \"D\", \"A\", \"B‚Ä¶\n$ Soil_depth             &lt;chr&gt; \"0-15\", \"0-15\", \"0-15\", \"0-15\", \"0-15\", \"0-15\",‚Ä¶\n$ Clay                   &lt;dbl&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 2.5, 2.5, 2.5, 0.0, 2.‚Ä¶\n$ Silt                   &lt;dbl&gt; 2.5, 0.0, 0.0, 2.5, 0.0, 0.0, 2.5, 2.5, 7.5, 7.‚Ä¶\n$ Sand                   &lt;dbl&gt; 97.5, 100.0, 100.0, 97.5, 100.0, 97.5, 95.0, 95‚Ä¶\n$ Texture_classification &lt;chr&gt; \"Sand\", \"Sand\", \"Sand\", \"Sand\", \"Sand\", \"Sand\",‚Ä¶\n\n\nThe soil_physico and soil_texture data sets contain the same columns, so we might as well merge them together. We will use the dplyr::left_join() function.\n\n\nCode\n# Actually I just want to merge these two together\nsoil_df &lt;- left_join(\n  soil_physico,\n  soil_texture,\n  by = join_by(Habitat_type, Plot_name, Subplot_name, Soil_depth)\n)\nsoil_df\n\n\n# A tibble: 144 √ó 20\n   Habitat_type Plot_name Subplot_name Soil_depth Nitrogen Phosphorus Magnesium\n   &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 Intact       KU1       A            0-15          0.617      0.248     0    \n 2 Intact       KU1       A            30-50         0.188      0.129     0.045\n 3 Intact       KU1       B            0-15          0.663      0.259     0.054\n 4 Intact       KU1       B            30-50         0.2        0.295     0.035\n 5 Intact       KU1       C            0-15          0.465      0.172     0.079\n 6 Intact       KU1       C            30-50         0.255      0.145     0.043\n 7 Intact       KU1       D            0-15          0.285      0.225     0.052\n 8 Intact       KU1       D            30-50         0.057      0.207     0.031\n 9 Intact       KU2       A            0-15          0.37       0.135     0.038\n10 Intact       KU2       A            30-50         0.114      0.168     0.021\n# ‚Ñπ 134 more rows\n# ‚Ñπ 13 more variables: Calcium &lt;dbl&gt;, Potassium &lt;dbl&gt;,\n#   Exchangable_magnesium &lt;dbl&gt;, Exchangable_calcium &lt;dbl&gt;,\n#   Exchangable_potassium &lt;dbl&gt;, Available_phosphorus &lt;dbl&gt;, pH &lt;dbl&gt;,\n#   Gravimetric_water_content &lt;dbl&gt;, Organic_matter &lt;dbl&gt;, Clay &lt;dbl&gt;,\n#   Silt &lt;dbl&gt;, Sand &lt;dbl&gt;, Texture_classification &lt;chr&gt;\n\n\nOnce we‚Äôve done that, the soil_df data set (the study variables) is actually missing the spatial data. We need to geocode it with the soil_gps data set. Again, dplyr::left_join() to the rescue!\n\n\nCode\nsoil_df &lt;- left_join(\n  soil_df, \n  soil_gps,\n  by = join_by(Habitat_type, Plot_name)\n)\n\n\nNow we‚Äôre in a position to plot the study variables on the map. Note that there are only 18 plots in the soil_gps data set, and each plot has repeated measurements. That means when we plot it, it will overlap and look like a single point. So a good thing to do is to jitter the point so it‚Äôs easier to see.\n\n\nCode\nggplot(kpg_sf) +\n  geom_sf(fill = NA) +\n  geom_jitter(\n    data = soil_df, \n    aes(Longitude, Latitude, col = Nitrogen, size = Nitrogen, \n        shape = Habitat_type),\n    width = 0.001, height = 0.001, alpha = 0.7\n  ) +\n  coord_sf(\n    xlim = c(114.46, 114.54),\n    ylim = c(4.58, 4.64)\n  ) +\n  scale_color_viridis_c() +\n  guides(size = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nPredictive models\nAt this stage, we probably want to consult an expert in this field, and ask what variables are important for predicting the nitrogen content in the soil, so that we can build a predictive model. In mathematics, a model is simply a relationship between variables, like so: \\[\ny = f(x_1,x_2,\\dots,x_p) + \\epsilon\n\\] where the \\(x_1,\\dots,x_p\\) are the input variables, and \\(y\\) is the output variable of interest (in this case, nitrogen concentrations). No model can perfectly account for this relationship, so we add a term \\(\\epsilon\\) which represents the error in the model. Ideally this should be as small as possible.\nSeveral models, ranging from classical statistical models to complex machine learning models, are possible:\n\nLinear regression model ‚Äì lm()\nGeneralised additive models (GAM) (Wood 2017) ‚Äì mgcv::gam()\nGaussian process regression (Kriging) ‚Äì kernlab::gausspr()\nRandom forests ‚Äì randomForest::randomForest()\nGeographically weighted regression (GWR) ‚Äì spgwr::gwr()\n\nLet‚Äôs focus on Gaussian process regression (because that‚Äôs one that I know quite well). The idea of GPR is to model the relationship between the input variables and the output variable as a multivariate Gaussian distribution: \\[\nf(x) \\sim \\operatorname{N}\\big(0, K(x,x')\\big)\n\\] where \\(K(x,x')\\) is the covariance function, which measures the similarity between the input variables \\(x\\) and \\(x'\\). The most common covariance function is the squared exponential function: \\[\nK(x,x') = \\exp\\left(-\\frac{1}{2}\\sum_{i=1}^p (x_i - x'_i)^2\\right).\n\\] Let \\(d\\) represent the ‚Äúdistance‚Äù between two points. Then the squared exponential kernel becomes very small when this distance \\(d\\) is large, and very large when \\(d\\) is small. Put another way, since elements of the matrix \\(K\\) represent co-variability, that means two points that are close together will behave similarly, and vice versa. This is very much in line with Tobler‚Äôs first law of geography: ‚ÄúEverything is related to everything else, but near things are more related than distant things‚Äù.\n\n\nCode\nx &lt;- seq(-4, 4, length = 100)\ny &lt;- exp(-x^2)\ntibble(d = x, Kxx = y) |&gt;\n  ggplot(aes(d, Kxx)) +\n  geom_line() \n\n\n\n\n\n\n\n\n\nGiven the assumed behaviour of our function \\(f(x)\\), and what is observed from the data, we can then make predictions about the nitrogen content at unobserved locations. Skipping over a whole lot of mathematics, let‚Äôs just fit this model in R.\n\n\nCode\n# Build a model to predict Nitrogen from all numeric variables. This is\n# definitely not theory based, so just want to show the code.\nsoil_df &lt;-\n  soil_df |&gt;\n  select(where(is.numeric)) \nmod &lt;- gausspr(Nitrogen ~ ., data = soil_df)\n\n\nUsing automatic sigma estimation (sigest) for RBF or laplace kernel \n\n\nCode\nmod\n\n\nGaussian Processes object of class \"gausspr\" \nProblem type: regression \n\nGaussian Radial Basis kernel function. \n Hyperparameter : sigma =  0.073382350892738 \n\nNumber of training instances learned : 144 \nTrain error : 0.108651374 \n\n\nHaving done that, we now want to prepare a prediction data frame. Essentially, we will rasterise the study area into a predefined grid. For the other variables, we will just set them at their mean values.\n\n\nCode\nxr &lt;- c(114.4, 114.6)\nxx &lt;- seq(xr[1] - 0.01, xr[2] + 0.01, length = 100)\n\nyr &lt;- c(4.5, 4.7)\nyy &lt;- seq(yr[1] - 0.01, yr[2] + 0.01, length = 100)\n\nmean_X &lt;- \n  soil_df |&gt;\n  summarise(across(everything(), mean)) |&gt;\n  select(-Longitude, -Latitude)\n\npred_df &lt;-\n  expand_grid(\n    Longitude = xx,\n    Latitude = yy\n  ) |&gt;\n  bind_cols(mean_X)\n\npred_df$ypred &lt;- predict(mod, newdata = pred_df)\n\n# Additional step: filter points that are outside of the Brunei land area.\npred_sf &lt;- \n  pred_df |&gt;\n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326) |&gt;\n  st_filter(y = brn_sf[1, ])\n\nggplot() +\n  geom_raster(\n    data = pred_sf,\n    aes(fill = ypred, geometry = geometry),\n    stat = \"sf_coordinates\",\n    alpha = 0.8\n  ) +\n  # geom_raster(data = pred_df, aes(Longitude, Latitude, fill = ypred),\n  #             alpha = 0.8) +\n  geom_sf(data = kpg_sf, fill = NA, inherit.aes = FALSE, col = \"black\") +\n  geom_sf(data = dis_sf, fill = NA, col = \"black\", linewidth = 1) +\n  geom_point(data = soil_gps, aes(Longitude, Latitude, \n                                  shape = Habitat_type)) +\n  geom_text_repel(\n    data = soil_gps,\n    aes(Longitude, Latitude, label = Plot_name),\n    box.padding = 0.5,\n    max.overlaps = 30\n  ) +\n  scale_fill_viridis_c() +\n  scale_colour_viridis_c() +\n  coord_sf(xlim = xr, ylim = yr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nGarbage In Garbage Out! Modelling is as much an art as it is a science. Careful consideration needs to be made as to what is considered a predictor of a variable."
  },
  {
    "objectID": "index.html#line-data-multilinestring",
    "href": "index.html#line-data-multilinestring",
    "title": "Analysing spatial data using R",
    "section": "Line data ((MULTI)LINESTRING)",
    "text": "Line data ((MULTI)LINESTRING)\nFor this example, we‚Äôll play with the road network shape file obtained from OpenStreetMaps. The data is in geojson format, so let‚Äôs import that into R.\n\n\nCode\nbrd &lt;- \n  read_sf(\"data/hotosm_brn_roads_lines_geojson/hotosm_brn_roads_lines_geojson.geojson\") |&gt;\n  sf::st_transform(4326)  # SET THE CRS!!! (WGS84)\nglimpse(brd)\n\n\nRows: 25,570\nColumns: 15\n$ name       &lt;chr&gt; \"Simpang 393\", \"Simpang 405\", NA, NA, NA, NA, \"Lebuhraya Tu‚Ä¶\n$ `name:en`  &lt;chr&gt; NA, NA, NA, NA, NA, NA, \"Tutong‚ÄìTelisai Highway\", NA, NA, N‚Ä¶\n$ highway    &lt;chr&gt; \"residential\", \"residential\", \"service\", \"residential\", \"tr‚Ä¶\n$ surface    &lt;chr&gt; NA, NA, NA, NA, NA, \"asphalt\", \"asphalt\", NA, NA, NA, \"asph‚Ä¶\n$ smoothness &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ width      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ lanes      &lt;chr&gt; NA, NA, NA, NA, NA, \"1\", \"2\", NA, NA, NA, \"2\", NA, NA, NA, ‚Ä¶\n$ oneway     &lt;chr&gt; NA, NA, NA, NA, NA, \"yes\", \"yes\", NA, NA, NA, \"no\", \"yes\", ‚Ä¶\n$ bridge     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ layer      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ source     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ `name:ms`  &lt;chr&gt; NA, NA, NA, NA, NA, NA, \"Lebuhraya Tutong‚ÄìTelisai\", NA, NA,‚Ä¶\n$ osm_id     &lt;int&gt; 386886618, 481030903, 512405939, 664532755, 442044892, 6651‚Ä¶\n$ osm_type   &lt;chr&gt; \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l‚Ä¶\n$ geometry   &lt;LINESTRING [¬∞]&gt; LINESTRING (114.6236 4.7910..., LINESTRING (114.‚Ä¶\n\n\nThere are 25,570 features in this data set, which may be a bit too much. Let‚Äôs try to focus on the major roads only. This information seems to be contained in the highway column. What‚Äôs in it?\n\n\nCode\ntable(brd$highway)\n\n\n\n     bridleway   construction       cycleway        footway  living_street \n             1             28             73            898             10 \n      motorway  motorway_link           path     pedestrian        primary \n           116            152            140             60            865 \n  primary_link    residential           road      secondary secondary_link \n           332           9023              1            446             79 \n       service          steps       tertiary  tertiary_link          track \n          9876             53            586             59            442 \n         trunk     trunk_link   unclassified \n           460            310           1560 \n\n\nAccording to this wiki, In OpenStreetMap, the major roads of a road network are sorted on an importance scale, from motorway to quaternary road.\n\n\n\nCode\nbrd_mjr &lt;- \n  brd |&gt;\n  filter(highway %in% c(\"motorway\", \"trunk\", \"primary\", \"secondary\")) \nbrd_mjr\n\n\nSimple feature collection with 1887 features and 14 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 114.1906 ymin: 4.516642 xmax: 115.2021 ymax: 5.037115\nGeodetic CRS:  WGS 84\n# A tibble: 1,887 √ó 15\n   name     `name:en` highway surface smoothness width lanes oneway bridge layer\n * &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;\n 1 Lebuhra‚Ä¶ Tutong‚ÄìT‚Ä¶ trunk   asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    &lt;NA&gt;   &lt;NA&gt; \n 2 Lebuhra‚Ä¶ Tutong‚ÄìT‚Ä¶ trunk   asphalt &lt;NA&gt;       &lt;NA&gt;  3     yes    &lt;NA&gt;   &lt;NA&gt; \n 3 Jalan S‚Ä¶ &lt;NA&gt;      primary asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    yes    1    \n 4 Jalan S‚Ä¶ &lt;NA&gt;      primary asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    &lt;NA&gt;   &lt;NA&gt; \n 5 Lebuh R‚Ä¶ Seria‚ÄìBe‚Ä¶ trunk   asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    &lt;NA&gt;   &lt;NA&gt; \n 6 &lt;NA&gt;     &lt;NA&gt;      trunk   asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    &lt;NA&gt;   &lt;NA&gt; \n 7 &lt;NA&gt;     &lt;NA&gt;      primary asphalt &lt;NA&gt;       &lt;NA&gt;  1     yes    &lt;NA&gt;   &lt;NA&gt; \n 8 Lebuh R‚Ä¶ Seria‚ÄìBe‚Ä¶ trunk   asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    yes    1    \n 9 &lt;NA&gt;     &lt;NA&gt;      primary asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    &lt;NA&gt;   &lt;NA&gt; \n10 Lebuhra‚Ä¶ Telisai‚Äì‚Ä¶ trunk   asphalt &lt;NA&gt;       &lt;NA&gt;  2     yes    &lt;NA&gt;   &lt;NA&gt; \n# ‚Ñπ 1,877 more rows\n# ‚Ñπ 5 more variables: source &lt;chr&gt;, `name:ms` &lt;chr&gt;, osm_id &lt;int&gt;,\n#   osm_type &lt;chr&gt;, geometry &lt;LINESTRING [¬∞]&gt;\n\n\nAnd now a plot of these roads.\n\n\nCode\nggplot() +\n  geom_sf(data = brn_sf) +\n  geom_sf(data = brd_mjr, aes(col = highway), size = 0.5) +\n  # scale_colour_viridis_d(option = \"turbo\")\n  ggsci::scale_colour_npg()\n\n\n\n\n\n\n\n\n\nWith this, I asked ChatGPT what kind of spatial analyses can be done on this data set. It said, when paired with appropriate data, we can do things like:\n\nNetwork Connectivity Analysis\n\nAssess reachability and identify disconnected road network components.\n\nAccessibility and Service Area Analysis\n\nDetermine service areas and catchment areas for essential services.\n\nTraffic Simulation and Management\n\nSimulate traffic flow to identify bottlenecks and suggest optimal routing.\n\nEnvironmental Impact Assessment\n\nEstimate vehicular emissions and model noise pollution from roads.\n\nUrban and Regional Planning\n\nExamine land use compatibility and assess infrastructure development needs.\n\nSafety Analysis\n\nIdentify accident hotspots and assess pedestrian safety.\n\nEconomic Analysis\n\nEvaluate economic accessibility and the impact of road projects.\n\n\nLet‚Äôs pick one of these: Calculate the distance between the centroid of several regions and the major hospital in the Belait district. This analysis guides urban and healthcare planning by pinpointing areas with inadequate access to emergency services, enabling targeted infrastructure and service improvements.\n\nRoad networks in Belait region\nFirst we ‚Äúcrop‚Äù the road network to the Belait region.\n\n\nCode\nbrd_belait &lt;- \n  brd |&gt;\n  st_intersection(filter(dis_sf, name == \"Belait\"))\n\nggplot(brd_belait) +\n  geom_sf() +\n  geom_sf(data = filter(dis_sf, name == \"Belait\"), fill = NA)\n\n\n\n\n\n\n\n\n\nIf we were to sample random points from the Belait polygon, we might get non-sensical areas like the extremely rural areas or forest reserves. So the idea is to sample random points from the road network itself. For this, we need a function that will get us a random point on the path itself.\n\n\nCode\nget_random_point &lt;- function(linestring) {\n  coords &lt;- st_coordinates(linestring)\n  samp_coord &lt;- coords[sample(nrow(coords), 1), , drop = FALSE]\n  samp_coord[, 1:3]\n}\nget_random_point(brd_belait$geometry[1])\n\n\n         X          Y         L1 \n114.241941   4.594271   1.000000 \n\n\nOnce we have this function, we need to map() this function onto each of the linestrings in the brd_belait data set. The resulting list of points is too large! So we will just sample 100 points (you can experiment with this number).\n\n\nCode\nrandom_points &lt;-\n  map(brd_belait$geometry, get_random_point) |&gt;\n  bind_rows() |&gt;\n  slice_sample(n = 100)\n\n\nWhat we have now is a data frame of 100 random points on the road network in the Belait district. We will use the {osrm} package to calculate the distance between these points and the Suri Seri Begawan Hospital in Kuala Belait. The output will be three things: 1) The duration (minutes); 2) The distance (km); and 3) a LINESTRING object that represents the path to get to the hospital. Unfortunately the osrmRoute() function is not vectorised, i.e.¬†we have to do it one-by-one for each of the 100 points. Luckily, we can just make a for loop and store the results in a list.\n\n\nCode\nsuriseri &lt;- c(114.198778, 4.583444)\n\nres &lt;- list()\nfor (i in 1:100) {\n  res[[i]] &lt;- osrmRoute(src = random_points[i, 1:2], dst = suriseri, overview = \"full\")\n}\nres &lt;- \n  bind_rows(res) |&gt;\n  as_tibble() |&gt;\n  st_as_sf()\nres\n\n\nSimple feature collection with 100 features and 4 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 114.1868 ymin: 4.39987 xmax: 114.5117 ymax: 4.68194\nGeodetic CRS:  WGS 84\n# A tibble: 100 √ó 5\n   src   dst   duration distance                                        geometry\n   &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;                                &lt;LINESTRING [¬∞]&gt;\n 1 1     dst       5.46     2.83 (114.2083 4.57302, 114.2083 4.57302, 114.2082 ‚Ä¶\n 2 1     dst      13.4      9.07 (114.2733 4.59769, 114.2732 4.59766, 114.2732 ‚Ä¶\n 3 1     dst       9.14     6.79 (114.2502 4.58966, 114.2501 4.59037, 114.25 4.‚Ä¶\n 4 1     dst      11.7      8.67 (114.2706 4.60023, 114.2707 4.60013, 114.2707 ‚Ä¶\n 5 1     dst      29.6     34.2  (114.4356 4.65023, 114.4356 4.65023, 114.4364 ‚Ä¶\n 6 1     dst      16.7     11.6  (114.2947 4.60751, 114.2948 4.60754, 114.2948 ‚Ä¶\n 7 1     dst       4.15     2.66 (114.2177 4.59164, 114.2177 4.59164, 114.2177 ‚Ä¶\n 8 1     dst      26.1     26.0  (114.3797 4.63288, 114.3797 4.63288, 114.3798 ‚Ä¶\n 9 1     dst       7.43     4.87 (114.2376 4.59018, 114.2373 4.5901, 114.2371 4‚Ä¶\n10 1     dst      18.9     15.3  (114.3206 4.60654, 114.3206 4.60654, 114.3204 ‚Ä¶\n# ‚Ñπ 90 more rows\n\n\nSo with all that done, we can now plot the paths taken by the 100 random points to the hospital. The map gives us an indication of which areas are underserved by the hospital, and can guide urban and healthcare planning by pinpointing areas with inadequate access to emergency services, enabling targeted infrastructure and service improvements.\n\n\nCode\nggplot(res) +\n  # geom_point(data = random_points, aes(x = X, y = Y), col = \"red\") +\n  geom_sf(data = filter(kpg_sf, district == \"Belait\"), fill = NA) +\n  geom_sf(aes(col = duration), linewidth = 1.2, alpha = 0.7) +\n  geom_point(x = suriseri[1], y = suriseri[2], col = \"red3\", pch = \"X\", \n             size = 3) +\n  scale_colour_viridis_c() \n\n\n\n\n\n\n\n\n\nImproving the analysis\n\nWeight analysis by populous areas. Outcalls to hospitals can be modelled using a Poisson distribution with the population as the rate parameter.\nUse a more sophisticated routing algorithm that accounts for traffic conditions and road quality (am vs pm, weekends vs weekdays, etc.).\nSimpler to analyse at the kampong or mukim level?"
  },
  {
    "objectID": "index.html#areal-data-multipolygons",
    "href": "index.html#areal-data-multipolygons",
    "title": "Analysing spatial data using R",
    "section": "Areal data ((MULTI)POLYGONS)",
    "text": "Areal data ((MULTI)POLYGONS)\n\n\n\n\n\n\nWhat we‚Äôll learn\n\n\n\n\nRepresent statistical data using colour mapping symbology (choropleth)\nUse ggplot2::geom_label() or ggrepel::geom_label_repel() to add labels to the map\nUsing a binned colour scale, e.g.¬†ggplot2::geom_scale_fill_viridis_b()\n\n\n\n\n\nCode\nbn_pop_sf &lt;- \n  left_join(\n    kpg_sf, \n    bn_census2021, \n    by = join_by(id, kampong, mukim, district\n  ))\n\nkpg_labels_sf &lt;-\n  bn_pop_sf |&gt;\n  arrange(desc(population)) |&gt;\n  slice_head(n = 10)\n\nbn_pop_sf |&gt;\n  # filter(population &gt; 50) |&gt;\n  ggplot() +\n  geom_sf(aes(fill = population), col = NA, alpha = 0.8) +\n  geom_sf(data = kpg_sf, fill = NA, col = \"black\") +\n  ggrepel::geom_label_repel(\n    data = kpg_labels_sf,\n    aes(label = kampong, geometry = geometry),\n    stat = \"sf_coordinates\",\n    inherit.aes = FALSE,\n    box.padding = 1,\n    size = 2,\n    max.overlaps = Inf\n  ) +\n  scale_fill_viridis_b(\n    name = \"Population\",\n    na.value = NA,\n    labels = scales::comma,\n    breaks = c(0, 50, 100, 1000, 5000, 10000, 15000)\n    # limits = c(0, 12000)\n  ) +\n  theme_bw()"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Analysing spatial data using R",
    "section": "",
    "text": "Setup instructions\nPrior to attending the event, please ensure you have done the following.\n\nInstall R and RStudio from https://posit.co/download/rstudio-desktop/.\n\nNote: These are two different things, so please ensure you have installed both of them. Go to"
  }
]